#!/bin/bash

# File:   paura
# Author: Marco Plaitano
# Date:   05 Sep 2023
# Brief:  Install and manage AUR packages.


_die() {
    [[ -n $1 ]] && error_msg="$1" || error_msg="Error in $(basename "$0")."
    if [[ $TERM != dumb ]]; then
        echo "$error_msg" >&2
    else
        notify-send "Error in $(basename "$0")" "$error_msg"
    fi
    exit 1
}

_help() {
    printf "Usage: %s OPTION [PKG]
Install and manage AUR packages.

-h, --help          Show this guide and exit
PKG                 Name or repository of package to install/update
-l, --list          List all installed packages
-r, --remove PKG    Remove package
-s, --search PKG    Search for any package named PKG
-u, --update        Update all installed packages\n" "$(basename "$0")"
}

_needs_programs() {
    local programs="$@"
    for program in ${programs[@]}; do
        if ! command -v "$program" &>/dev/null; then
            _die "$program is needed but not installed."
        fi
    done
}


# Install (or update) package.
_install() {
    _needs_programs git pacman grep
    local repo="$1"
    if [[ "$repo" != "https://aur.archlinux.org/"* ]]; then
        repo="https://aur.archlinux.org/$repo"
    fi
    # Strip package name to create directory.
    local pkg_name="${repo#*archlinux.org/}"
    pkg_name="${pkg_name%.git}"
    local pkg_dir="$_PAURA_ROOT_DIR/$pkg_name"

    # Package already installed, pull new changes.
    if [[ -d "$pkg_dir" ]]; then
        pushd "$pkg_dir" &>/dev/null
        output=$(git pull)
        [[ $? -ne 0 ]] && _die "Could not pull new changes from source."
        # Do nothing if the package is already updated.
        if [[ "$output" == *"up to date"* ]]; then
            echo "Already up to date."
            popd &>/dev/null
            return
        fi
    # Package not installed, clone its repository.
    else
        new_installation=true
        echo "Cloning repository..."
        output=$(git clone "$repo" "$pkg_dir" 2>&1)
        [[ $? -ne 0 ]] && _die "Could not download package."
        # Do nothing if the repository is empty.
        if [[ "$output" == *"empty repository"* ]]; then
            [[ -d "$pkg_dir" ]] && rm -rf "$pkg_dir"
            _die "Package doesn't seem to exist."
        fi
        pushd "$pkg_dir" &>/dev/null
    fi

    # Install package from source code.
    # If installation is successful add package name to the list.
    if makepkg -si --noconfirm ; then
        if ! grep -q "$pkg_name" "$_PAURA_LIST_FILE" ; then
            echo "$pkg_name" >> "$_PAURA_LIST_FILE"
        fi
    # Remove installation directory if it fails.
    else
        # Only remove directory if it is being installed for the first time.
        if [[ -n $new_installation ]]; then
            [[ -d "$pkg_dir" ]] && rm -rf "$pkg_dir"
        fi
    fi
    popd &>/dev/null
}


# Check that the list of installed packages exists and is readable.
_check_list() {
    if [[ ! -f "$_PAURA_LIST_FILE" ]]; then
        _die "No AUR packages installed."
    fi
    if [[ ! -r "$_PAURA_LIST_FILE" ]]; then
        _die "Could not read list of packages from file '$_PAURA_LIST_FILE'."
    fi
}


# List all installed packages.
_list() {
    _needs_programs cat sort
    _check_list
    cat "$_PAURA_LIST_FILE" | sort -u
}


# Delete package.
_remove() {
    _needs_programs pacman sed
    local pkg_name="$1"
    local pkg_dir="$_PAURA_ROOT_DIR/$pkg_name"
    [[ -z $pkg_name ]] && _die "No package specified."

    # Uninstall command (check for the need of sudo).
    cmd="pacman -R $pkg_name"
    [[ "$EUID" -ne 0 ]] && cmd="sudo $cmd"
    $cmd || _die
    # Remove package directory.
    [[ -d "$pkg_dir" ]] && rm -rf "$pkg_dir"
    # Remove package name from list.
    if [[ -w "$_PAURA_LIST_FILE" ]]; then
        sed -i "/$pkg_name/d" "$_PAURA_LIST_FILE"
    fi
}


# Search for package.
_search() {
    _needs_programs curl jq
    local pkg_name="$1"
    [[ -z $pkg_name ]] && _die "No package specified."
    curl -s "https://aur.archlinux.org/rpc/?v=5&type=search&arg=$pkg_name" | \
        jq -r '.results.[] | "\u001b[1m\(.Name):\u001b[0m\n  \(.Description)"'
}


# Update all installed packages.
_update() {
    _check_list
    # Read list file line by line and update each package.
    while read -r pkg; do
        echo "############# Updating package: '$pkg'"
        pkg="https://aur.archlinux.org/$pkg"
        _install "$pkg"
    done < "$_PAURA_LIST_FILE"
}



readonly _PAURA_ROOT_DIR="$HOME/.cache/aur_pkgs"
readonly _PAURA_LIST_FILE="$_PAURA_ROOT_DIR/list.txt"

[[ ! -d "$_PAURA_ROOT_DIR" ]] && mkdir -p "$_PAURA_ROOT_DIR"

# Parse command-line arguments.
case "$1" in
    '')
        _die "Usage: $(basename "$0") OPTION [PKG]" ;;
    -h | --help)
        _help ;;
    -l | --list)
        _list ;;
    -r | --remove)
        _remove "$2" ;;
    -s | --search)
        _search "$2" ;;
    -u | --update)
        _update ;;
    -*)
        _die "Invalid option. See '$(basename "$0") -h' for more." ;;
    *)
        _install "$1" ;;
esac
